@name_title@::@name_title@
(
     @@params|const @host_tname@* @vname@|,n    @@
)
: AppTransFn { @id@, @arity@, @has_output_str@ }@@params|, @vname@_{*@vname@}|n    @@
, paramSerializer_ { this }
{

}

const Record& @name_title@::GetRecord(int idx) const
{
    assert (idx < @arity@);

    @@record_params|if (idx == @record_idx@) return @vname@_;|n    @@

    throw std::invalid_argument("invalid argument");
}

const Value& @name_title@::GetPostValue(int idx) const
{
    assert (idx < @arity@);

    // TODO: Implement: needed for correct merkle updates

    throw std::runtime_error("not implemented");
}

bool @name_title@::Touches(int idx) const
{
    assert (idx < @arity@);

    // TODO: Implement correct Touches for better performance
    // by minimizing merkle tree updates

    return true;
}

void @name_title@::SetOutput(ReadLog& log)
{
#ifdef @has_output_indicator@
    LowParse_Slice_slice inp { const_cast<uint8_t*>(log.Current()),  static_cast<uint32_t>(log.LeftToRead()) };
    uint32_t len = @c_output_type@_jumper(inp, 0);
    out_ = @c_output_type@_reader(inp, 0);
    log.DeserializeBuf(len);
#endif
}

@name_title@_ParamSerializer::@name_title@_ParamSerializer(const @name_title@* fn)
  : fn_ { fn }
{

}

size_t @name_title@_ParamSerializer::Serialize(uint8_t *buf, size_t size) const
{
    uint32_t pos = 0;
    uint32_t wrote = 0;

    @@non_record_params|file:param_serialize.tmp|n    @@

    return pos;
}

size_t @name_title@_ParamSerializer::SerializationLength() const
{
    /* Hacky implementation of SerializationLength - fix */
    uint8_t buf [4096];
    size_t wrote = Serialize(buf, sizeof(buf));
    return wrote;
}

void @name_title@_ParamSerializer::Serialize4Hash(Hasher& hasher) const
{
    uint8_t buf[4096];
    size_t wrote = Serialize(buf, sizeof(buf));
    hasher.HashPartial(buf, wrote);
}
