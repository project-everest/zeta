#include <stdio.h>
#include <openenclave/host.h>
#include <verifier_proxy.h>
#include <zeta_config.h>

#include <app.h>
#include <trace.h>
#include <verifier_proxy.h>
#include <verifier_stub.h>

using namespace Zeta;
using namespace Zeta::mcounter;

void test_case1(const char* type, uint32_t flags);
void test_case2(const char* type, uint32_t flags);


static VerifierProxy GetVerifierProxy(const char *type, uint32_t flags)
{
    verifier_init(type, flags);
    VerifierProxy proxy{ &verifier_verify_log };
    return proxy;
}

// Include the untrusted openenclave_mcounter header that is generated
// during the build. This file is generated by calling the
// sdk tool oeedger8r against the openenclave_mcounter.edl file.

bool check_simulate_opt(int* argc, const char* argv[])
{
    for (int i = 0; i < *argc; i++)
    {
        if (strcmp(argv[i], "--simulate") == 0)
        {
            fprintf(stdout, "Running in simulation mode\n");
            memmove(&argv[i], &argv[i + 1], (*argc - i) * sizeof(char*));
            (*argc)--;
            return true;
        }
    }
    return false;
}


int main(int argc, const char* argv[])
{
    int ret = 1;

    uint32_t flags = OE_ENCLAVE_FLAG_DEBUG;
    if (check_simulate_opt(&argc, argv))
    {
        flags |= OE_ENCLAVE_FLAG_SIMULATE;
    }

    if (argc != 2)
    {
        fprintf(
            stderr, "Usage: %s enclave_image_path [ --simulate  ]\n", argv[0]);
        return ret;
    }

    test_case1(argv[1], flags);
    // test_case2(argv[1], flags);

    verifier_terminate();

    return 0;
}

void test_case1(const char* type, uint32_t flags) {
    fprintf(stdout, "******Starting test case 1: test single function (newcounter)******\n");
    auto proxy = GetVerifierProxy(type, flags);
    VerifierStub verifier{ 0, proxy };

    Record record{ 0 };
    App_key_app_key k = 0;
    New_Counter newCounter{ &k, &record };

    verifier.Run(&newCounter);
    verifier.Flush();
    fprintf(stdout, "Test case 1: Success!\n");
    fprintf(stdout, "****************************\n\n");
}

void test_case2(const char* type, uint32_t flags) {
    fprintf(stdout, "******Starting test case 2: test single key init/incr******\n");
    auto proxy = GetVerifierProxy(type, flags);
    VerifierStub verifier{ 0, proxy };

    // initialize a counter for key 0
    Record record{ 0 };
    App_key_app_key k = 0;
    New_Counter newCounter{ &k, &record };

    verifier.Run(&newCounter);
    verifier.Flush();

    App_key_app_key k2 = 0;
    Record record2{ 0, 0 };
    // incr counter for key 0 providing pre-image record (0,0)
    Incr_Counter incrCounter{ &k2, &record2 };
    verifier.Run(&incrCounter);
    verifier.Flush();

    // the output of the operation is the prev value which is 0
    assert(incrCounter.GetOutput() == 0);

    fprintf(stdout, "Test case 2: Success!\n");
    fprintf(stdout, "****************************\n\n");
}
