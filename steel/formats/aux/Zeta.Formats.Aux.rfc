struct {
  uint64 v3;
  uint64 v2;
  uint64 v1;
  uint64 v0;
} u256;

abstract
significant_digits_t = "Zeta.Formats.Aux.External.significant_digits_t" < 2..2 >

struct {
  u256 base_key_k;
  significant_digits_t base_key_significant_digits;
} base_key;

abstract
significant_digits_st_t = "Zeta.Formats.Aux.External.significant_digits_st_t" < 2..2 >

struct {
  u256 internal_key_k;
  significant_digits_st_t internal_key_significant_digits;
} internal_key;

enum {
  vfalse,
  vtrue,
  (255)
} vbool;

u256 hash_value;

struct {
   base_key dhd_key;
   hash_value dhd_h; /* I cannot name this field h because it would clash with the finalizer generated by QD */
   vbool evicted_to_blum;
} descendent_hash_desc;

enum {
  vnone,
  vsome,
  (255)
} voption;

struct {
  voption dh_tag;
  select(dh_tag) {
    case vnone: Empty;
    case vsome: descendent_hash_desc;
  } dh;
} descendent_hash;

struct {
  descendent_hash l;
  descendent_hash r;
} mval_value;

enum {
  key_internal,
  key_application,
  (255)
} key_kind;

abstract
application_key = "Zeta.Formats.Aux.External.application_key" < 0..2040 > /* these constant bounds must match Zeta.Steel.ApplicationTypes */

struct {
  key_kind key_tag;
  select(key_tag) {
    case key_internal: internal_key;
    case key_application: application_key;
  } key_v;
} key;

uint16 slot_id;

struct {
  key addm_k;
  mval_value addm_v;
  slot_id addm_s;
  slot_id addm_s2;
} addm_payload;

struct {
  slot_id addmapp_s;
  slot_id addmapp_s2;
} addmapp_payload_hdr;

uint64 timestamp;
uint16 thread_id;

struct {
  slot_id addbapp_s;
  timestamp addbapp_t;
  thread_id addbapp_tid;
} addbapp_payload_hdr;

struct {
  key addb_k;
  mval_value addb_v;
  slot_id addb_s;
  timestamp addb_t;
  thread_id addb_tid;
} addb_payload;

struct {
  slot_id evictm_s;
  slot_id evictm_s2;
} evictm_payload;

struct {
  slot_id evictb_s;
  timestamp evictb_t;
} evictb_payload;

struct {
  slot_id evictbm_s;
  slot_id evictbm_s2;
  timestamp evictbm_t;
} evictbm_payload;

struct {
  uint8 ra_fid;
} runapp_payload_hdr;

enum {
  AddM,
  AddB,
  EvictM,
  EvictB,
  EvictBM,
  NextEpoch,
  VerifyEpoch,
  AddMApp,
  AddBApp,
  RunApp,
  (255)
} log_entry_kind;

struct {
  log_entry_kind le_tag;
  select(le_tag) {
    case AddM: addm_payload;
    case AddB: addb_payload;
    case EvictM: evictm_payload;
    case EvictB: evictb_payload;
    case EvictBM: evictbm_payload;
    case NextEpoch: Empty;
    case VerifyEpoch: Empty;
    case AddMApp: addmapp_payload_hdr;
    case AddBApp: addbapp_payload_hdr;
    case RunApp: runapp_payload_hdr;
  } le_payload;
} log_entry_hdr;

abstract
application_value = "Zeta.Formats.Aux.External.application_value" < 0..2040 > /* these constant bounds must match Zeta.Steel.ApplicationTypes */

enum {
     MValue,
     DValueNone,
     DValueSome,
     (255)
} value_kind;

struct {
  value_kind v_tag;
  select(v_tag) {
    case MValue: mval_value;
    case DValueNone: Empty;
    case DValueSome: application_value;
  } v_payload;
} value;

struct {
  key record_key;
  value record_value;
} record;

struct {
  record sr_record;
  timestamp sr_timestamp;
  thread_id sr_thread_id;
} stamped_record;
