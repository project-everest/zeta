This directory is slated to contain the EverParse-generated formal
definitions of parsers and serializers for the verifier log entry.

This directory DOES depend on EverParse, but DOES NOT depend on, and
IS NOT used by, the rest of Zeta.

Its sole purpose is to regenerate the C parser and serializer
implementations in ../dist, and the data type definitions in
../Zeta.Formats.Types.fst

It is NOT necessary to do that, unless the contents below changes.


Contents:

* Zeta.Formats.rfc: EverParse data format description for the
  verifier log entry.

* Zeta.Formats.fst: glue code between the declarations of parsers
  and serializers in Zeta.Formats.fsti and their actual formal
  definitions that are automatically generated by EverParse.

* obj/ : all temporary F* and KReMLin files for the regeneration of
  the parsers and serializers. This directory is temporary and
  automatically generated, it should not be checked into the
  repository.

  + obj/*.fst, obj/*.fsti : the actual formal definitions of parsers
    and serializers automatically generated by EverParse.

  + obj/*.checked: the F* binary proof blobs, obtained after
    verification of each F* file

  + obj/*.krml: the KReMLin binary code blobs, obtained after
    extraction of the computationally relevant code from each F*
    module


Usage:

* you can use an EverParse source tree from
  https://github.com/project-everest/everparse/ . Just set the QD_HOME
  environment variable to the root directory of that tree, and then
  use `make`.

  NOTE: if you do so, then you will need to compile EverParse
  yourself, by running `make quackyducky` in your EverParse source
  tree. This step needs OCaml.

* however, you do not need to download EverParse yourself. Instead,
  you can leave QD_HOME unset and run
  `./make_from_everparse_release.sh` instead of `make`, with any
  arguments that would be accepted as per the Makefile. In that case,
  a suitable EverParse binary release will be automatically downloaded
  and used.
